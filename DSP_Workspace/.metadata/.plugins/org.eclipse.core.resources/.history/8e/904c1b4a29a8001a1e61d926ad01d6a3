//###########################################################################
//  DSP Developing
//  Device: TMS320F28033PNT
//  Clock freq: 60MHz (input osc. freq. = 12MHz)
//  ADC: 3MSPS
//  FFT: 32point
//
#define Toggle1_Mux   GpioCtrlRegs.GPAMUX2.bit.GPIO24
#define Toggle1_Dir   GpioCtrlRegs.GPADIR.bit.GPIO24
#define Toggle1_Clr   GpioDataRegs.GPACLEAR.bit.GPIO24
#define Toggle1_Set   GpioDataRegs.GPASET.bit.GPIO24
#define Toggle1_Dat   GpioDataRegs.GPADAT.bit.GPIO24
// Constants:
#define     FFT32_Weights   {255,0,250,-50,236,-98,212,-142,180,-180,142,-212,98,-236,50,-250,0,-255,-50,-250,-98,-236,-142,-212,-180,-180,-212,-142,-236,-98,-250,-50}
//###########################################################################
#include "DSP28x_Project.h"     // Device Headerfile and Examples Include File
#include <stdio.h>
__interrupt void cpu_timer0_isr(void);
//__interrupt void xint1_isr(void);
void    Initialize_Routine(void);
void    Init_GPIOs(void);
void    Init_ADC(void);
void    ADC_Capture(void);
void    FFT_32(void);
void    FFT_16(void);
void    Flush_Vectors(void);
void    Reset_Device(void);
Uint16  volatile    RealTime_Flag;
#pragma DATA_SECTION(perm_32, "VecSpace");
Uint16  perm_32[] = {0,32,16,48,8,40,24,56,4,36,20,52,12,44,28,60};
#pragma DATA_SECTION(perm_16, "VecSpace");
Uint16  perm_16[] = {0,16,8,24,4,20,12,28};
#pragma DATA_SECTION(ADC_Buffer, "VecSpace");
int16   ADC_Buffer[32];
#pragma DATA_SECTION(Weight, "VecSpace");
int16   Weight[32] = FFT32_Weights; // {255,0,250,-50,236,-98,212,-142,180,-180,142,-212,98,-236,50,-250,0,-255,-50,-250,-98,-236,-142,-212,-180,-180,-212,-142,-236,-98,-250,-50};
#pragma DATA_SECTION(fft_draft, "VecSpace");
int32   fft_draft[64];
#pragma DATA_SECTION(FFT_out_32, "VecSpace");
Uint16  FFT_out_32[16];
#pragma DATA_SECTION(FFT_out_16, "VecSpace");
Uint16  FFT_out_16[8];
//=============================================//
void 	main(void)
{
    Init_GPIOs();
    //
    memcpy(&RamfuncsRunStart, &RamfuncsLoadStart, (size_t)&RamfuncsLoadSize);
    //
    InitSysCtrl(); // Step 1. Initialize System Control: PLL, WatchDog, enable Peripheral Clocks
    //
    DINT;      // Disable CPU interrupts
    //
    InitFlash();
    //
    InitPieCtrl(); // Initialize the PIE control registers to their default state. The default state is all PIE interrupts disabled and flags are cleared.
    //
    IER = 0x0000;  // Disable CPU interrupts and
    IFR = 0x0000;  // clear all CPU interrupt flags
    //
    // Initialize the PIE vector table with pointers to the shell Interrupt
    // Service Routines (ISR).
    // This will populate the entire table, even if the interrupt
    // is not used in this example.  This is useful for debug purposes.
    // The shell ISR routines are found in DSP2803x_DefaultIsr.c.
    InitPieVectTable();
    //
    // Interrupts that are used in this example are re-mapped to
    // ISR functions found within this file.
    //     InitEPWMs();
    //
    Init_GPIOs();
    Init_ADC();
    Initialize_Routine();
    //
    ServiceDog();    // Reset the watchdog counter
    //
    EALLOW;
    GpioCtrlRegs.GPAMUX2.bit.GPIO18 = 0;  // GPIO18 = GPIO
    SysCtrlRegs.XCLK.bit.XCLKOUTDIV = 3;
    EDIS;
    //
    // Enable global Interrupts and higher priority real-time debug events:
    EINT;   // Enable Global interrupt INTM
    ERTM;   // Enable Global realtime interrupt DBGM
    //
    // Enable Timer0 for interrupting every 1ms:
    CpuTimer0Regs.TIM.all = 0 ;
    CpuTimer0Regs.PRD.all = (Uint32) (60000);  //1msec
    CpuTimer0Regs.TCR.bit.TRB = 1; // Reload timer0
    CpuTimer0Regs.TCR.bit.TSS = 0; // Start Timer0
    CpuTimer0Regs.TCR.bit.TIE = 1; // Enable timer interrupt
    //
    for(;;);
}
//=============================================//
void    Reset_Device(void)
{
    DINT;
    EALLOW;
    SysCtrlRegs.WDCR = 0x0047; // a random wrong value in order to reset device
    EDIS;
}
//=============================================//
void 	Initialize_Routine(void)
{
    // Enable Watchdog
    ServiceDog();    // Reset the watchdog counter
    EALLOW;
    SysCtrlRegs.SCSR = 0; //BIT1;
    SysCtrlRegs.WDCR = 0x002F; // WDCLK = OSCCLK/512/64
    //
    DINT;
    InitCpuTimers();   // For this example, only initialize the Cpu Timers
    CpuTimer0Regs.TCR.all = 0; // 0x4001; // Use write-only instruction
    CpuTimer0Regs.TCR.bit.TIE = 0;
    // External Interrupt:
    // GpioIntRegs.GPIOXINT1SEL.bit.GPIOSEL = ZC_pin_No;   // XINT1 is ZC
    // Configure XINT1
    // XIntruptRegs.XINT1CR.bit.POLARITY = 3;      // both edge (0:Falling edge, 1:Rising edge, 3:both edge)
    // Enable XINT1
    // XIntruptRegs.XINT1CR.bit.ENABLE = 1;        // Enable XINT1
    // Interrupts that are used in this example are re-mapped to
    // ISR functions found within this file.
    //PieVectTable.XINT1 = &xint1_isr;    // Zero-Cross-Pulse
    PieVectTable.TINT0 = &cpu_timer0_isr;
    EDIS;    // This is needed to disable write to EALLOW protected registers
    //
    // Enable XINT1 and XINT2 and TINT0 in the PIE: Group 1 interrupt 4 & 5 &7
    PieCtrlRegs.PIECTRL.bit.ENPIE = 1;    // Enable the PIE block
    //PieCtrlRegs.PIEIER1.bit.INTx4 = 1;    // XINT1(Zero-Cross-Pulse)      // Enable PIE Group 1 INT4
    PieCtrlRegs.PIEIER1.bit.INTx7 = 1;    // TINT0 (Timer0)   // Enable PIE Group 1 INT7
    IER |= M_INT1;                        // Enable CPU INT1
    DINT;
    // Initialize I2C
    // I2caRegs.I2CSAR = 0x0050;        // Slave address - EEPROM control code
    // I2caRegs.I2CPSC.all = 6;         // Prescaler - need 7-12 Mhz on module clk
    // I2caRegs.I2CCLKL = 10;           // NOTE: must be non zero
    /// I2caRegs.I2CCLKH = 5;            // NOTE: must be non zero
    //        I2caRegs.I2CIER.all = 0x24; // 0x24;      // Enable SCD & ARDY interrupts
    //I2caRegs.I2CMDR.all = 0x0020;    // Take I2C out of reset
    // Stop I2C when suspended
    // I2caRegs.I2CFFTX.all = 0x6000;   // Enable FIFO mode and TXFIFO
    // I2caRegs.I2CFFRX.all = 0x2040;   // Enable RXFIFO, clear RXFFINT,
    //
    DELAY_US(10000);

}
//============================================//
void    Flush_Vectors(void)
{
    Uint16  index,i;
    //
    for (i = 0; i < 32; i++)
    {
        ADC_Buffer[i] = 0x0800; // Mid value
    }
    //
    //
    for (index = 0; index < 64; index++)
    {
        fft_draft[index] = 0;
    }
    //
    for (i = 0; i < 16; i++)
    {
        FFT_out_32[i] = 0;
    }
    //
    for (i = 0; i < 8; i++)
    {
        FFT_out_16[i] = 0;
    }
    //
    //
}
//============================================//
#pragma CODE_SECTION(cpu_timer0_isr,"ramfuncs");
__interrupt void cpu_timer0_isr(void)
{
    ServiceDog();    // Reset the watchdog counter
    Toggle1_Set = 1;
    // DELAY_US(1000);
    ADC_Capture(); //10us
    FFT_32(); //140us
    Toggle1_Clr = 1;

    // stop timer0 , no further count
    //CpuTimer0Regs.TCR.bit.TIE = 0;
    //CpuTimer0Regs.TCR.bit.TSS = 1;
    CpuTimer0Regs.TCR.bit.TIF = 1;
    CpuTimer0.InterruptCount++;
    // Acknowledge this interrupt to receive more interrupts from group 1
    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}
//==============================================//
#pragma CODE_SECTION(FFT_32 , "ramfuncs")
void 	FFT_32(void)
{
    // FFT:
    Uint16 p;
    Uint16 k;
    int32 a_r;
    int32 a_i;
    int32 b_r;
    int32 b_i;
    int32 w_r;
    int32 w_i;
    int32 temp1;
    int32 temp2;
    int16  temp3;
    //int16   temp4;
    //index = index << 5;
    for (k=0;k<32;k++)
    {
        temp3 = (ADC_Buffer[k] - 2048);
        fft_draft[2*k] = temp3;
        fft_draft[2*k+1] = 0 ;// temp4;
    }
    //index = index >> 5;

    for(p=0;p<16;p++)
    {
        for(k=p;k<32;k=k+32)
        {
            a_r = fft_draft[2*k];
            a_i = fft_draft[2*k+1];
            b_r = fft_draft[2*k+32];
            b_i = fft_draft[2*k+32+1];
            //w=(exp(-pi*1i*p/16));
            w_r = Weight[2*p];
            w_i = Weight[2*p+1];
            //fft_draft(k+1)=a+b;
            fft_draft[2*k] = a_r + b_r;
            fft_draft[2*k+1] = a_i + b_i;
            // fft_draft(k+16)=(a-b)*w;
            temp1 = ((a_r - b_r) * w_r) - ((a_i - b_i) * w_i);
            fft_draft[2*k+32] = temp1 >> 8;
            temp2 = ((a_r - b_r) * w_i) + ((a_i - b_i) * w_r);
            fft_draft[2*k+32+1] = temp2 >> 8;
        }
    }
    //
    for (p=0;p<8;p++)
    {
        for (k=p;k<32;k=k+16)
        {
            a_r = fft_draft[2*k];
            a_i = fft_draft[2*k+1];
            b_r = fft_draft[2*k+16];
            b_i = fft_draft[2*k+16+1];
            //%t=(exp(-pi*1i*2*p/16));
            //%w=Weight(2*p+1);
            w_r = Weight[4*p];
            w_i = Weight[4*p+1];
            //%fft_draft(k+1)=b+fft_draft(k+8+1);
            fft_draft[2*k] = a_r + b_r;
            fft_draft[2*k+1] = a_i + b_i;
            temp1 = ((a_r - b_r) * w_r) - ((a_i - b_i) * w_i);
            fft_draft[2*k+16] = temp1 >> 8;
            temp2 = ((a_r - b_r) * w_i) + ((a_i - b_i) * w_r);
            fft_draft[2*k+1+16] = temp2 >> 8;
        }
    }
    //
    for (p=0;p<4;p++)
    {
        for (k=p;k<32;k=k+8)
        {
            a_r = fft_draft[2*k];
            a_i = fft_draft[2*k+1];
            b_r = fft_draft[2*k+8];
            b_i = fft_draft[2*k+1+8];
            // %t=(exp(-pi*1i*4*p/16));
            // %t=Weight(4*p+1);
            w_r = Weight[8*p];
            w_i = Weight[8*p+1];

            // %fft_draft(k+1)=b+fft_draft(k+4+1);
            fft_draft[2*k] = (a_r + b_r);
            fft_draft[2*k+1] = (a_i + b_i);

            // %fft_draft(k+4+1)=(b-fft_draft(k+4+1))*t;
            temp1 = ((a_r - b_r) * w_r) - ((a_i - b_i) * w_i);
            fft_draft[2*k+8] = temp1 >> 8;
            temp2 = ((a_r - b_r) * w_i) + ((a_i - b_i) * w_r);
            fft_draft[2*k+1+8] = temp2 >> 8;
        }
    }
    //
    //m=1:
    for (p=0;p<2;p++)
    {
        for (k=p;k<32;k=k+4)
        {
            a_r = fft_draft[2*k];
            a_i = fft_draft[2*k+1];
            b_r = fft_draft[2*k+4];
            b_i = fft_draft[2*k+1+4];
            //t=(exp(-pi*1i*8*p/16));
            //t=Weight(8*p+1);
            w_r = Weight[16*p];
            w_i = Weight[16*p+1];

            //fft_draft(k+1)=b+fft_draft(k+2+1);
            fft_draft[2*k] = (a_r + b_r);
            fft_draft[2*k+1] = (a_i + b_i);

            //fft_draft(k+2+1)=(a-fft_draft(k+2+1))*t;
            temp1 = ((a_r - b_r) * w_r) - ((a_i - b_i) * w_i);
            fft_draft[2*k+4] = temp1 >> 8;
            temp2 = ((a_r - b_r) * w_i) + ((a_i - b_i) * w_r);
            fft_draft[2*k+1+4] = temp2 >> 8;
        }
    }
    //m=0:
    //for p=0:1:0
    p=0;
    for (k=p;k<32;k=k+2)
    {
        a_r = fft_draft[2*k];
        a_i = fft_draft[2*k+1];
        b_r = fft_draft[2*k+2];
        b_i = fft_draft[2*k+1+2];
        //t=(exp(-pi*1i*16*p/16));
        //t=Weight(16*p+1);
        w_r = Weight[32*p];
        w_i = Weight[32*p+1];

        //fft_draft(k+1)=a+fft_draft(k+1+1);
        fft_draft[2*k] = (a_r + b_r);
        fft_draft[2*k+1] = (a_i + b_i);

        //fft_draft(k+1+1)=(b-fft_draft(k+1+1))*t;
        temp1 = ((a_r - b_r) * w_r) - ((a_i - b_i) * w_i);
        fft_draft[2*k+2] = temp1 >> 8;
        temp2 = ((a_r - b_r) * w_i) + ((a_i - b_i) * w_r);
        fft_draft[2*k+1+2] = temp2 >> 8;
    }
    //
    //
    //        Uint16 perm_32[] = {0,32,16,48,8,40,24,56,4,36,20,52,12,44,28,60};
    Uint16 pidx;
    for (k=0;k<16;k++)
    {
        pidx = perm_32[k];
        temp1 = (fft_draft[pidx] * fft_draft[pidx]) + (fft_draft[pidx+1] * fft_draft[pidx+1]);
        //FFT_out[index][k] = (temp1 >> 16);  //[k + index] = temp1 >> 16;
        //            temp1 = sqrt(temp1);
        temp1 = (temp1 >> 12);  //4096
        if (k == 0)
        {   temp1 = (temp1 >> 4);} // modify DC index
        temp3 = 0;
        if (temp1 > 60) // 25mV (Vp_p ADCinput, Vref = 1650mV)
        { temp3 = 25;}
        if (temp1 > 240) // 50mV (Vp_p ADCinput, Vref = 1650mV)
        { temp3 = 50;}
        if (temp1 > 550) // 75mV (Vp_p ADCinput, Vref = 1650mV)
        { temp3 = 75;}
        if (temp1 > 950) // 100mV
        { temp3 = 100;}
        if (temp1 > 1500) // 125mV
        { temp3 = 125;}
        if (temp1 > 2150) // 150mV
        { temp3 = 150;}
        if (temp1 > 3000) // 175mV
        { temp3 = 175;}
        if (temp1 > 3800) // 200mV
        { temp3 = 200;}
        if (temp1 > 4950) // 225mV
        { temp3 = 225;}
        if (temp1 > 6000) // 250mV
        { temp3 = 250;}
        if (temp1 > 7400) // 275mV
        { temp3 = 275;}
        if (temp1 > 8650) // 300mV
        { temp3 = 300;}
        if (temp1 > 11700) // 350mV
        { temp3 = 350;}
        if (temp1 > 15300) // 400mV
        { temp3 = 400;}
        if (temp1 > 19400) // 450mV
        { temp3 = 450;}
        if (temp1 > 24000) // 500mV
        { temp3 = 500;}
        if (temp1 > 29000) // 550mV
        { temp3 = 550;}
        if (temp1 > 34600) // 600mV
        { temp3 = 600;}
        if (temp1 > 40000) // 650mV
        { temp3 = 650;}
        if (temp1 > 47000) // 700mV
        { temp3 = 700;}
        if (temp1 > 54000) // 750mV
        { temp3 = 750;}
        if (temp1 > 61500) // 800mV
        { temp3 = 800;}
        if (temp1 > 69400) // 850mV
        { temp3 = 850;}
        if (temp1 > 77850) // 900mV
        { temp3 = 900;}
        if (temp1 > 86700) // 950mV
        { temp3 = 950;}
        if (temp1 > 96100) // 1000mV
        { temp3 = 1000;}
        if (temp1 > 116300) // 1100mV
        { temp3 = 1100;}
        if (temp1 > 138400) // 1200mV
        { temp3 = 1200;}
        if (temp1 > 162400) // 1300mV
        { temp3 = 1300;}
        if (temp1 > 188400) // 1400mV
        { temp3 = 1400;}
        if (temp1 > 216000) // 1500mV
        { temp3 = 1500;}
        FFT_out_32[k] = temp3;
    }
}
//=============================================//
/*#pragma CODE_SECTION(FFT_16, "ramfuncs")
void 	FFT_16(void)
{
    // FFT:
    Uint16 p;
    Uint16 k;
    int32 a_r;
    int32 a_i;
    int32 b_r;
    int32 b_i;
    int32 w_r;
    int32 w_i;
    int32 temp1;
    int32 temp2;
    int16  temp3;
    //
    for (k=0;k<16;k++)
    {
        temp3 = (ADC_Buff_M2[(index*4) + k] - 2048);
        fft_draft[2*k] = temp3;
        fft_draft[2*k+1] = 0 ;
    }
    for (k=16;k<32;k++)
    {
        fft_draft[2*k] = 0;
        fft_draft[2*k+1] = 0 ;
    }

    //
    for(p=0;p<8;p++)
    {
        for(k=p;k<16;k=k+16)
        {
            a_r = fft_draft[2*k];
            a_i = fft_draft[2*k+1];
            b_r = fft_draft[2*k+16];
            b_i = fft_draft[2*k+16+1];
            //w=(exp(-pi*1i*p/16));
            w_r = Weight[4*p];
            w_i = Weight[4*p+1];
            //fft_draft(k+1)=a+b;
            fft_draft[2*k] = a_r + b_r;
            fft_draft[2*k+1] = a_i + b_i;
            // fft_draft(k+16)=(a-b)*w;
            temp1 = ((a_r - b_r) * w_r) - ((a_i - b_i) * w_i);
            fft_draft[2*k+16] = temp1 >> 8;
            temp2 = ((a_r - b_r) * w_i) + ((a_i - b_i) * w_r);
            fft_draft[2*k+16+1] = temp2 >> 8;
        }
    }
    //
    for (p=0;p<4;p++)
    {
        for (k=p;k<16;k=k+8)
        {
            a_r = fft_draft[2*k];
            a_i = fft_draft[2*k+1];
            b_r = fft_draft[2*k+8];
            b_i = fft_draft[2*k+8+1];
            //%t=(exp(-pi*1i*2*p/16));
            //%w=Weight(2*p+1);
            w_r = Weight[8*p];
            w_i = Weight[8*p+1];
            //%fft_draft(k+1)=b+fft_draft(k+8+1);
            fft_draft[2*k] = a_r + b_r;
            fft_draft[2*k+1] = a_i + b_i;
            temp1 = ((a_r - b_r) * w_r) - ((a_i - b_i) * w_i);
            fft_draft[2*k+8] = temp1 >> 8;
            temp2 = ((a_r - b_r) * w_i) + ((a_i - b_i) * w_r);
            fft_draft[2*k+1+8] = temp2 >> 8;
        }
    }
    //
    for (p=0;p<2;p++)
    {
        for (k=p;k<16;k=k+4)
        {
            a_r = fft_draft[2*k];
            a_i = fft_draft[2*k+1];
            b_r = fft_draft[2*k+4];
            b_i = fft_draft[2*k+1+4];
            // %t=(exp(-pi*1i*4*p/16));
            // %t=Weight(4*p+1);
            w_r = Weight[16*p];
            w_i = Weight[16*p+1];

            // %fft_draft(k+1)=b+fft_draft(k+4+1);
            fft_draft[2*k] = (a_r + b_r);
            fft_draft[2*k+1] = (a_i + b_i);

            // %fft_draft(k+4+1)=(b-fft_draft(k+4+1))*t;
            temp1 = ((a_r - b_r) * w_r) - ((a_i - b_i) * w_i);
            fft_draft[2*k+4] = temp1 >> 8;
            temp2 = ((a_r - b_r) * w_i) + ((a_i - b_i) * w_r);
            fft_draft[2*k+1+4] = temp2 >> 8;
        }
    }
    //
    //m=1:
    p=0;
    for (k=p;k<16;k=k+2)
    {
        a_r = fft_draft[2*k];
        a_i = fft_draft[2*k+1];
        b_r = fft_draft[2*k+2];
        b_i = fft_draft[2*k+1+2];
        //t=(exp(-pi*1i*8*p/16));
        //t=Weight(8*p+1);
        w_r = Weight[32*p];
        w_i = Weight[32*p+1];

        //fft_draft(k+1)=b+fft_draft(k+2+1);
        fft_draft[2*k] = (a_r + b_r);
        fft_draft[2*k+1] = (a_i + b_i);

        //fft_draft(k+2+1)=(a-fft_draft(k+2+1))*t;
        temp1 = ((a_r - b_r) * w_r) - ((a_i - b_i) * w_i);
        fft_draft[2*k+2] = temp1 >> 8;
        temp2 = ((a_r - b_r) * w_i) + ((a_i - b_i) * w_r);
        fft_draft[2*k+1+2] = temp2 >> 8;
    }

    //        Uint16 perm_16[] = {0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30};
    Uint16 pidx;
    for (k=0;k<8;k++)
    {
        pidx = perm_16[k];
        temp1 = (fft_draft[pidx] * fft_draft[pidx]) + (fft_draft[pidx+1] * fft_draft[pidx+1]);
        //FFT_out_16[index][k] = (temp1 >> 16);  //[k + index] = temp1 >> 16;
        //temp1 = sqrt(temp1); // ???
        temp1 = (temp1 >> 10);
        temp3 = 0;
        if (temp1 > 60) // 25mV (Vp_p ADCinput, Vref = 1650mV)
        { temp3 = 25;}
        if (temp1 > 240) // 50mV (Vp_p ADCinput, Vref = 1650mV)
        { temp3 = 50;}
        if (temp1 > 550) // 75mV (Vp_p ADCinput, Vref = 1650mV)
        { temp3 = 75;}
        if (temp1 > 950) // 100mV
        { temp3 = 100;}
        if (temp1 > 1500) // 125mV
        { temp3 = 125;}
        if (temp1 > 2150) // 150mV
        { temp3 = 150;}
        if (temp1 > 3000) // 175mV
        { temp3 = 175;}
        if (temp1 > 3800) // 200mV
        { temp3 = 200;}
        if (temp1 > 4950) // 225mV
        { temp3 = 225;}
        if (temp1 > 6000) // 250mV
        { temp3 = 250;}
        if (temp1 > 7400) // 275mV
        { temp3 = 275;}
        if (temp1 > 8650) // 300mV
        { temp3 = 300;}
        if (temp1 > 11700) // 350mV
        { temp3 = 350;}
        if (temp1 > 15300) // 400mV
        { temp3 = 400;}
        if (temp1 > 19400) // 450mV
        { temp3 = 450;}
        if (temp1 > 24000) // 500mV
        { temp3 = 500;}
        if (temp1 > 29000) // 550mV
        { temp3 = 550;}
        if (temp1 > 34600) // 600mV
        { temp3 = 600;}
        if (temp1 > 40000) // 650mV
        { temp3 = 650;}
        if (temp1 > 47000) // 700mV
        { temp3 = 700;}
        if (temp1 > 54000) // 750mV
        { temp3 = 750;}
        if (temp1 > 61500) // 800mV
        { temp3 = 800;}
        if (temp1 > 69400) // 850mV
        { temp3 = 850;}
        if (temp1 > 77850) // 900mV
        { temp3 = 900;}
        if (temp1 > 86700) // 950mV
        { temp3 = 950;}
        if (temp1 > 96100) // 1000mV
        { temp3 = 1000;}
        if (temp1 > 116300) // 1100mV
        { temp3 = 1100;}
        if (temp1 > 138400) // 1200mV
        { temp3 = 1200;}
        if (temp1 > 162400) // 1300mV
        { temp3 = 1300;}
        if (temp1 > 188400) // 1400mV
        { temp3 = 1400;}
        if (temp1 > 216000) // 1500mV
        { temp3 = 1500;}
        FFT_out_16[index][k] = temp3;
    }
}*/
//=============================================//
void 	Init_GPIOs(void)
{
    // Configure GPIOs:
    EALLOW;
    Toggle1_Mux = 0;
    Toggle1_Dir = 1;
    Toggle1_Clr = 1;
    EDIS;
}
//=============================================//
void 	Init_ADC(void)
{
    EALLOW;
    // initialize adc
    SysCtrlRegs.PCLKCR0.bit.ADCENCLK = 1; // Return ADC clock to original state
    __asm (" NOP");
    __asm (" NOP");
    AdcRegs.ADCCTL1.bit.RESET = 1;
    __asm (" NOP");
    __asm (" NOP");
    __asm (" NOP");
    __asm (" NOP");
    AdcRegs.ADCCTL1.bit.ADCPWDN = 1;
    AdcRegs.ADCCTL1.bit.ADCBGPWD = 1;
    AdcRegs.ADCCTL1.bit.ADCREFPWD = 1;
    AdcRegs.ADCCTL1.bit.ADCREFSEL = 1;
    AdcRegs.ADCCTL1.bit.INTPULSEPOS = 1;
    AdcRegs.ADCCTL1.bit.VREFLOCONV = 0;
    AdcRegs.ADCCTL1.bit.TEMPCONV = 0;
    //
    AdcRegs.ADCCTL2.bit.CLKDIV2EN = 0;
    AdcRegs.ADCCTL2.bit.ADCNONOVERLAP = 0;
    ////////////////////////////////////////
    // Analog input signal:
    AdcRegs.ADCSOC0CTL.bit.CHSEL=0x9; // B1 pin
    AdcRegs.ADCSOC0CTL.bit.ACQPS = 7; // (this + 1 + 6clkcycle(16.66ns)) = sampling time in ns
    AdcRegs.ADCSOC1CTL.bit.CHSEL=0x9; // B1 pin
    AdcRegs.ADCSOC1CTL.bit.ACQPS = 7;
    AdcRegs.INTSEL1N2.bit.INT1CONT = 0;
    AdcRegs.INTSEL1N2.bit.INT2CONT = 0;
    AdcRegs.ADCINTSOCSEL1.bit.SOC0 = 0;
    AdcRegs.ADCINTSOCSEL1.bit.SOC1 = 0;
    AdcRegs.INTSEL1N2.bit.INT1SEL = 0; // connect EOC0 to ADCINT1
    AdcRegs.INTSEL1N2.bit.INT1E = 1;
    AdcRegs.INTSEL1N2.bit.INT2SEL = 1; // connect EOC1 to ADCINT2
    AdcRegs.INTSEL1N2.bit.INT2E = 1;
    AdcRegs.SOCPRICTL.bit.SOCPRIORITY = 2; // SOC0 & SOC1 highest priority
    AdcRegs.ADCSOC0CTL.bit.TRIGSEL = 0x09; //   ePWM3, ADCSOCA
    AdcRegs.ADCSOC1CTL.bit.TRIGSEL = 0x0A; //   ePWM3, ADCSOCB
    ///////////////////////////////
    //   AdcRegs.INTSEL1N2.bit.INT2SEL=1;
    //   AdcRegs.INTSEL1N2.bit.INT2E=1;
    EPwm3Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1; // TBCLK = SYSCLKOUT
    EPwm3Regs.TBCTL.bit.CLKDIV = TB_DIV1;
    EPwm3Regs.ETSEL.bit.SOCAEN = 0;
    EPwm3Regs.ETSEL.bit.SOCBEN = 0;
    EPwm3Regs.ETSEL.bit.SOCASEL = 0b100;    //Enable event time-base counter equal to CMPA when the timer is incrementing
    EPwm3Regs.ETSEL.bit.SOCBSEL = 0b010;    //Enable event time-base counter equal to period (TBCTR = TBPRD)
    EPwm3Regs.ETPS.bit.SOCAPRD   = 1;        // Generate pulse on 1st event
    EPwm3Regs.ETPS.bit.SOCBPRD   = 1;        // Generate pulse on 1st event
    EPwm3Regs.TBPRD = 37;       // 18 * 16.66  => 300ns sampling // Period = * TBCLK counts
    EPwm3Regs.CMPA.half.CMPA = 19;  // Compare A TBCLK counts
    //    EPwm3Regs.TBPRD = 120;    // 60 * 16.66  => 1us sampling // Period = * TBCLK counts
    //    EPwm3Regs.CMPA.half.CMPA = 60;  // Compare A TBCLK counts
    //   EPwm3Regs.CMPB = 30; // Compare B TBCLK counts
    EPwm3Regs.TBPHS.half.TBPHS = 0; // Set Phase register to zero
    EPwm3Regs.TBCTR = 0; // clear TB counter
    EPwm3Regs.TBCTL.bit.CTRMODE = TB_COUNT_UP;
    EPwm3Regs.TBCTL.bit.PHSEN = TB_DISABLE; // Phase loading disabled
    EPwm3Regs.TBCTL.bit.PRDLD = TB_SHADOW;
    EPwm3Regs.TBCTL.bit.SYNCOSEL = TB_SYNC_DISABLE;
    EPwm3Regs.CMPCTL.bit.SHDWAMODE = CC_SHADOW;
    EPwm3Regs.CMPCTL.bit.SHDWBMODE = CC_SHADOW;
    EPwm3Regs.CMPCTL.bit.LOADAMODE = CC_CTR_ZERO; // load on TBCTR = Zero
    EPwm3Regs.CMPCTL.bit.LOADBMODE = CC_CTR_ZERO; // load on TBCTR = Zero
    AdcRegs.ADCCTL1.bit.ADCENABLE = 1;
    DELAY_US(1000);
    EDIS;
}
//=============================================//
#pragma CODE_SECTION(ADC_Capture, "ramfuncs");
void 	ADC_Capture(void)
{// Start ADC:
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    EPwm3Regs.TBCTR = 0; // init TB counter
    EPwm3Regs.ETSEL.bit.SOCAEN = 1;
    EPwm3Regs.ETSEL.bit.SOCBEN = 1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[0] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[1] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[2] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[3] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[4] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[5] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[6] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[7] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[8] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[9] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[10] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[11] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[12] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[13] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[14] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[15] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[16] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[17] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[18] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[19] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[20] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[21] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[22] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[23] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[24] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[25] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[26] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[27] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[28] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[29] = AdcResult.ADCRESULT1;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT1 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1=1;
    ADC_Buffer[30] = AdcResult.ADCRESULT0;
    //
    while(AdcRegs.ADCINTFLG.bit.ADCINT2 == 0){}
    AdcRegs.ADCINTFLGCLR.bit.ADCINT2=1;
    ADC_Buffer[31] = AdcResult.ADCRESULT1;
    //
    EPwm3Regs.ETSEL.bit.SOCAEN = 0;
    EPwm3Regs.ETSEL.bit.SOCBEN = 0;
}
//=============================================//
//=============================================//
//=============================================//
